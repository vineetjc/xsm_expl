%{
	#include <stdio.h>
	#include <stdlib.h>
	#include "t2.h"
	#include "y.tab.h"
	int number;
	int i, j;
%}
	
%%
	
[0-9]+ {printf("%s\n", yytext); number = atoi(yytext); yylval.treeNode = createTree(number,NULL,NULL,NODE_CONSTANT,NULL,NULL,NULL,NULL,NULL,NULL); return NUM;}
"endif" {printf("%s\n", yytext);return ENDIF;}
"endwhile" {printf("%s\n", yytext);return ENDWHILE;}
"end" {printf("%s\n", yytext);return END;}
"begin" {printf("%s\n", yytext);return BEG;}
"read" {printf("%s\n", yytext);return READ;}
"write" {printf("%s\n", yytext);return WRITE;}
"break" {printf("%s\n", yytext);return BREAK;}
"continue" {printf("%s\n", yytext);return CONTINUE;}
"if" {printf("%s\n", yytext);return IF;}
"then" {printf("%s\n", yytext);return THEN;}
"else" {printf("%s\n", yytext);return ELSE;}
"do" {printf("%s\n", yytext);return DO;}
"while" {printf("%s\n", yytext);return WHILE;}
"repeat" {printf("%s\n", yytext);return REPEAT;}
"until" {printf("%s\n", yytext);return UNTIL;}
"decl" {printf("%s\n", yytext);return DECL;}
"enddecl" {printf("%s\n", yytext);return ENDDECL;}
"return" {printf("%s\n", yytext);return RETURN;}
"main" {printf("%s\n", yytext);return MAIN;}
"type" {printf("%s\n", yytext);return TYPE;}
"endtype" {printf("%s\n", yytext);return ENDTYPE;}
"int" {printf("%s\n", yytext);yylval.number = inttype; return INT;}
"str" {printf("%s\n", yytext);yylval.number = stringtype; return STR;}
"null" {printf("%s\n", yytext);
		yylval.treeNode = createTree(0,NULL,yytext,NODE_STRCONSTANT,NULL,NULL,NULL,NULL,NULL,NULL);
		return NULLTYPE;}
"initialise" {printf("%s\n", yytext);
		yylval.treeNode = createTree(0,NULL,yytext,NODE_FUNCTION,NULL,NULL,NULL,NULL,NULL,NULL);
		//printf("Veruthe2.\n");
		return INITIALISE;}
"alloc" {printf("%s\n", yytext);
		yylval.treeNode = createTree(0,NULL,yytext,NODE_FUNCTION,NULL,NULL,NULL,NULL,NULL,NULL);
		return ALLOC;}
"free" {printf("%s\n", yytext);
		yylval.treeNode = createTree(0,NULL,yytext,NODE_FUNCTION,NULL,NULL,NULL,NULL,NULL,NULL);
		return FREE;}						
[a-z|A-Z][a-z|A-Z|0-9]* {printf("%s\n", yytext);
		yylval.treeNode = createTree(0,NULL,yytext,NODE_VAR,NULL,NULL,NULL,NULL,NULL,NULL);
		return ID;}
["][a-z|A-Z|0-9| ]+["] {printf("%s\n", yytext);
					char *temp = (char *)malloc(100);
					yylval.treeNode = createTree(0,NULL,yytext,NODE_STRCONSTANT,NULL,NULL,NULL,NULL,NULL,NULL);
					return STRING;}		
">=" {printf("%s\n", yytext);return GE;}
"<=" {printf("%s\n", yytext);return LE;}
"==" {printf("%s\n", yytext);return CONDEQ;}
"!=" {printf("%s\n", yytext);return NTEQ;}
"&&" {printf("%s\n", yytext);return AND;}
">" {printf("%s\n", yytext);return GT;}
"<" {printf("%s\n", yytext);return LT;}
"+" {printf("%s\n", yytext);return PLUS;}
"-" {printf("%s\n", yytext);return MINUS;}
"*" {printf("%s\n", yytext);return MUL;}
"/" {printf("%s\n", yytext);return DIV;}
"%" {printf("%s\n", yytext);return MOD;}
"=" {printf("%s\n", yytext);return EQ;}
";" {printf("%s\n", yytext);return *yytext;}
"," {printf("%s\n", yytext);return *yytext;}
"[" {printf("%s\n", yytext);return *yytext;}
"]" {printf("%s\n", yytext);return *yytext;}
"(" {printf("%s\n", yytext);return *yytext;}
")" {printf("%s\n", yytext);return *yytext;}
"{" {printf("%s\n", yytext);return *yytext;}
"}" {printf("%s\n", yytext);return *yytext;}
"." {printf("%s\n", yytext);return *yytext;}
[ \t] {}
[\n] {}
. {yyerror("unknown character\n"); exit(1);}
	
%%
	
int yywrap(void) 
{
	return 1;
}
